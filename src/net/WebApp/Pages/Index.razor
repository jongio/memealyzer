@page "/"
@inject ApiServiceClient ApiServiceClient;
@inject FunctionsServiceClient FunctionsServiceClient;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="container" style="margin-bottom:10px">
    <div class="row text-center">
        <div class="col-12">
            <img src=imgs/logo.png height="94" width="773" alt="Memealyzer" style="margin-bottom: 10px;" class="img-fluid" />
        </div>
        <div class="col-12">
            <div class="form-row">
                <div class="col col-6">
                    <button type="submit" value="submit" disabled="@(!IsConnected)" class="btn shadow-none" style="cursor:pointer" @onclick="@(async () => await PostImage())"><span
                            style="font-size: 18px" class="oi oi-plus" title="Add Meme" aria-hidden="true"></span></button>
                </div>
                <div class="col col-6">
                    <button disabled="@(!IsConnected)" class="btn shadow-none" @onclick="ToggleStream" style="cursor:pointer">
                        <div class="memestream">
                            @if (streaming)
                            {
                                <span class="spinner-border spinner-border-sm text-primary" role="status" title="Memestream is running"></span>
                            }
                            else
                            {
                                <span style="font-size: 20px" class="oi oi-infinity" title="Start Memestream" aria-hidden="true"></span>
                            }
                        </div>
                    </button>
                </div>
            </div>

        </div>
    </div>
</div>

@if (images == null)
{
    <div class="container">
    <div class="row text-center">
        <div class="col-md-12">
            <div class="spinner-grow" role="status">
                <span class="sr-only">Loading memes...</span>
            </div>
            <p>Loading memes...</p>
        </div>
    </div>
</div>
}
else
{
    <div class="container">
    <div class="row text-center text-lg-left">
        @foreach (var image in images)
            {
                <div class="col-md-4" @key="image" style="margin-bottom:5px;">
                    <div class="card" style="width: 100%;">
                        <a href="@image.Url" target="_blank"><img class="card-img-top border border-8 border-@image.Color img-thumbnail" style="border-style: @borderStyle !important"
                        src="@image.BlobUri" alt="@image.Text" title="@image.Text"></a>
                        <div class="card-body">
                            <div class="container">
                                <div class="row">
                                    <div class="col text-left"><span style="display:inline-block;height:38px;width:42px;font-size:16px;padding:6px 12px;"
                                    class="oi oi-@(GetSentimentIcon(image)) text-@image.Color" title="Sentiment: @image.Sentiment" aria-hidden="true"></span></div>
                                    <div class="col">
                                        <div class="d-flex justify-content-center" style="padding-top:8px;">
                                            @if (!image.Complete)
                                            {
                                                <div class="spinner-border spinner-border-sm text-primary" role="status"><span class="sr-only">@image.Status</span></div>
                                            }
                                            else
                                            {
                                                <div>@image.Sentiment</div>
                                            }
                                        </div>
                                    </div>
                                    <div class="col text-right">
                                        <button type="submit" value="submit" class="btn" disabled="@(!image.Complete)" @onclick="@(async () => await DeleteImage(image.Id))"><span
                                        style="font-size: 16px" class="oi oi-trash" title="Delete Meme" aria-hidden="true"></span></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<Image> images;
    private HubConnection hubConnection;
    private string borderStyle;
    private bool streaming = false;
    private Timer timer;

    protected override async Task OnInitializedAsync()
    {
        borderStyle = await ApiServiceClient.GetBorderStyle();
        images = await ApiServiceClient.GetImages();

        await FunctionsServiceClient.InitializeAsync();
        hubConnection = FunctionsServiceClient.GetHubConnection();

        hubConnection.On<Image>("ReceiveImage", (image) =>
        {
            Console.WriteLine(image.Id);
            int index = FindImageById(image.Id);
            if (index >= 0)
            {
                images[index] = image;
            }
            else
            {
                images.Insert(0, image);
            }

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    string GetSentimentIcon(Image image)
    {
        switch (image.Sentiment)
        {
            case "Positive":
                return "check";
            case "Negative":
                return "x";
            case "Mixed":
            case "Neutral":
                return "warning";
            case "None":
                return "ban";
            default:
                return "ellipses";
        }
    }

    int FindImageById(string id)
    {
        return images.FindIndex(0, f => string.Compare(f.Id, id, true) == 0);
    }

    async Task PostImage()
    {
        var image = new Image { Id = Guid.NewGuid().ToString() };
        image = await ApiServiceClient.PostImage(image);
        images.Insert(0, image);
    }

    void ToggleStream()
    {
        streaming = !streaming;
        if (streaming)
        {
            timer = new Timer(async (object stateInfo) =>
            {
                await PostImage();
                StateHasChanged();
            }, new AutoResetEvent(false), 0, 5000);
        }
        else
        {
            if (timer != null)
            {
                timer.Dispose();
                timer = null;
            }
        }
    }

    async Task DeleteImage(string id)
    {
        int index = FindImageById(id);
        Console.WriteLine(index);
        if (index >= 0)
        {
            images.RemoveAt(index);
        }
        StateHasChanged();
        var deletedImage = await ApiServiceClient.DeleteImage(id);
    }

    bool IsConnected =>
    hubConnection != null && hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}